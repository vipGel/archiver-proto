// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: archiver_service.proto

package archiver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LLMService_Pack_FullMethodName   = "/connector.LLMService/Pack"
	LLMService_Unpack_FullMethodName = "/connector.LLMService/Unpack"
)

// LLMServiceClient is the client API for LLMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LLMServiceClient interface {
	Pack(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PackRequest, PackResponse], error)
	Unpack(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UnpackRequest, UnpackResponse], error)
}

type lLMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLLMServiceClient(cc grpc.ClientConnInterface) LLMServiceClient {
	return &lLMServiceClient{cc}
}

func (c *lLMServiceClient) Pack(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PackRequest, PackResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LLMService_ServiceDesc.Streams[0], LLMService_Pack_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PackRequest, PackResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LLMService_PackClient = grpc.BidiStreamingClient[PackRequest, PackResponse]

func (c *lLMServiceClient) Unpack(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UnpackRequest, UnpackResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LLMService_ServiceDesc.Streams[1], LLMService_Unpack_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UnpackRequest, UnpackResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LLMService_UnpackClient = grpc.BidiStreamingClient[UnpackRequest, UnpackResponse]

// LLMServiceServer is the server API for LLMService service.
// All implementations must embed UnimplementedLLMServiceServer
// for forward compatibility.
type LLMServiceServer interface {
	Pack(grpc.BidiStreamingServer[PackRequest, PackResponse]) error
	Unpack(grpc.BidiStreamingServer[UnpackRequest, UnpackResponse]) error
	mustEmbedUnimplementedLLMServiceServer()
}

// UnimplementedLLMServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLLMServiceServer struct{}

func (UnimplementedLLMServiceServer) Pack(grpc.BidiStreamingServer[PackRequest, PackResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Pack not implemented")
}
func (UnimplementedLLMServiceServer) Unpack(grpc.BidiStreamingServer[UnpackRequest, UnpackResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Unpack not implemented")
}
func (UnimplementedLLMServiceServer) mustEmbedUnimplementedLLMServiceServer() {}
func (UnimplementedLLMServiceServer) testEmbeddedByValue()                    {}

// UnsafeLLMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LLMServiceServer will
// result in compilation errors.
type UnsafeLLMServiceServer interface {
	mustEmbedUnimplementedLLMServiceServer()
}

func RegisterLLMServiceServer(s grpc.ServiceRegistrar, srv LLMServiceServer) {
	// If the following call pancis, it indicates UnimplementedLLMServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LLMService_ServiceDesc, srv)
}

func _LLMService_Pack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LLMServiceServer).Pack(&grpc.GenericServerStream[PackRequest, PackResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LLMService_PackServer = grpc.BidiStreamingServer[PackRequest, PackResponse]

func _LLMService_Unpack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LLMServiceServer).Unpack(&grpc.GenericServerStream[UnpackRequest, UnpackResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LLMService_UnpackServer = grpc.BidiStreamingServer[UnpackRequest, UnpackResponse]

// LLMService_ServiceDesc is the grpc.ServiceDesc for LLMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LLMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connector.LLMService",
	HandlerType: (*LLMServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pack",
			Handler:       _LLMService_Pack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Unpack",
			Handler:       _LLMService_Unpack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "archiver_service.proto",
}
